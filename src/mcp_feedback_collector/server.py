import io
import base64
from PIL import Image
import threading
import queue
from pathlib import Path
from datetime import datetime
import os
import sys
import argparse # Êñ∞Â¢ûÂØºÂÖ• for command-line argument parsing

from PySide6.QtWidgets import (
    QApplication, QDialog, QVBoxLayout, QHBoxLayout, QLabel, QTextEdit,
    QPushButton, QFileDialog, QMessageBox, QScrollArea, QWidget, QGroupBox,
    QSizePolicy
)
from PySide6.QtGui import QPixmap, QImage, QClipboard, QIcon, QGuiApplication
from PySide6.QtCore import Qt, Signal, Slot, QThread, QTimer, QSize, QBuffer

from mcp.server.fastmcp import FastMCP
from mcp.server.fastmcp.utilities.types import Image as MCPImage

# ÂàõÂª∫MCPÊúçÂä°Âô®ÂÆû‰æã
mcp = FastMCP(
    "‰∫§‰∫íÂºèÂèçÈ¶àÊî∂ÈõÜÂô®",
    dependencies=["pillow"]
)

# ÈÖçÁΩÆÈªòËÆ§ÂØπËØùÊ°ÜË∂ÖÊó∂Êó∂Èó¥ÔºàÁßíÔºâ
DEFAULT_DIALOG_TIMEOUT = 300  # 5ÂàÜÈíü
# ‰ªéÁéØÂ¢ÉÂèòÈáèËØªÂèñË∂ÖÊó∂Êó∂Èó¥ÔºåËã•Êú™ËÆæÁΩÆÂàô‰ΩøÁî®ÈªòËÆ§ÂÄº
DIALOG_TIMEOUT = int(os.getenv("MCP_DIALOG_TIMEOUT", DEFAULT_DIALOG_TIMEOUT))

# FeedbackDialogÁ±ªÂÆö‰πâÔºåÁªßÊâøËá™QDialogÔºåÁî®‰∫éÊûÑÂª∫ÂíåÁÆ°ÁêÜÂèçÈ¶àÂØπËØùÊ°ÜÁïåÈù¢
class FeedbackDialog(QDialog):
    # Áî®Êà∑ÂèçÈ¶àÊèê‰∫§Êó∂ÂèëÂá∫ÁöÑ‰ø°Âè∑Ôºå‰º†ÈÄíÂèçÈ¶àÂÜÖÂÆπÂàóË°®
    feedback_submitted = Signal(object)

    # ÂàùÂßãÂåñÂØπËØùÊ°Ü
    def __init__(self, work_summary: str = "", timeout_seconds: int = DIALOG_TIMEOUT, parent=None):
        super().__init__(parent)
        self.work_summary = work_summary
        self.timeout_seconds = timeout_seconds
        self.selected_images_data = [] # Â≠òÂÇ®ÈÄâ‰∏≠ÁöÑÂõæÁâáÊï∞ÊçÆ (Â≠óËäÇÂíåÂéüÂßãÊñá‰ª∂Âêç)
        self.image_preview_layout = None # ÂõæÁâáÈ¢ÑËßàÂå∫ÂüüÁöÑÂ∏ÉÂ±Ä
        self.text_widget = None # Áî®Êà∑ÊñáÂ≠óÂèçÈ¶àÁöÑËæìÂÖ•Ê°Ü

        self.setWindowTitle("üéØ Â∑•‰ΩúÂÆåÊàêÊ±áÊä•‰∏éÂèçÈ¶àÊî∂ÈõÜ")
        self.setGeometry(0, 0, 700, 800) # ËÆæÁΩÆÂàùÂßãÁ™óÂè£Â§ßÂ∞è
        self.setMinimumSize(QSize(600, 700)) # ËÆæÁΩÆÊúÄÂ∞èÁ™óÂè£Â§ßÂ∞è
        self.setStyleSheet("""
            QDialog { background-color: #f5f5f5; }
            QLabel, QPushButton, QGroupBox, QTextEdit {
                /* A general cross-platform font stack */
                font-family: "Segoe UI", "Helvetica Neue", "Arial", "sans-serif";
            }
            /* You can add more specific fallbacks if certain scripts (e.g., CJK) are not rendering well,
               for example, by appending "Microsoft YaHei", "PingFang SC" to the font-family list above. */

            QGroupBox {
                font-size: 12pt;
                font-weight: bold;
                background-color: #ffffff;
                color: #34495e;
                border: 1px solid #dddddd;
                border-radius: 5px;
                margin-top: 1ex; /* leave space at the top for the title */
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                subcontrol-position: top left; /* position at the top left */
                padding: 0 3px;
                background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #f5f5f5, stop:1 #f5f5f5);
                left: 10px; /* Adjust to align with border */
            }
            QPushButton {
                font-size: 10pt;
                font-weight: bold;
                border-radius: 3px;
                padding: 8px 12px;
                margin-top: 20px;
                min-height: 28px; /* Button height */
            }
            QPushButton:hover {
                background-color: #e0e0e0; /* Slightly darker on hover */
            }
            QTextEdit {
                /* font-family is now set globally above */
                font-size: 10pt;
                background-color: #ffffff;
                color: #2c3e50;
                border: 1px solid #cccccc;
                border-radius: 3px;
            }
        """)

        self.center_dialog() # Â±Ö‰∏≠ÊòæÁ§∫ÂØπËØùÊ°Ü
        self.create_widgets_pyside() # ÂàõÂª∫ÂØπËØùÊ°ÜÂÜÖÁöÑÊâÄÊúâÊéß‰ª∂

        # Â¶ÇÊûúËÆæÁΩÆ‰∫ÜË∂ÖÊó∂ÔºåÂàôÂêØÂä®Ë∂ÖÊó∂ËÆ°Êó∂Âô®
        if self.timeout_seconds > 0:
            self.timeout_timer = QTimer(self)
            self.timeout_timer.setSingleShot(True)
            self.timeout_timer.timeout.connect(self.handle_timeout)
            self.timeout_timer.start(self.timeout_seconds * 1000)

    # Â∞ÜÂØπËØùÊ°ÜÂ±Ö‰∏≠ÊòæÁ§∫Âú®Â±èÂπï‰∏ä
    def center_dialog(self):
        screen = QGuiApplication.primaryScreen().geometry()
        x = (screen.width() - self.width()) // 2
        y = (screen.height() - self.height()) // 2
        self.move(x, y)

    # Â§ÑÁêÜÂØπËØùÊ°ÜË∂ÖÊó∂‰∫ã‰ª∂
    def handle_timeout(self):
        print("Feedback dialog timed out.")
        self.feedback_submitted.emit(None) # ÂèëÈÄÅNoneË°®Á§∫Ë∂ÖÊó∂
        self.reject() # ÂÖ≥Èó≠ÂØπËØùÊ°ÜÔºåÁä∂ÊÄÅ‰∏∫Rejected

    # ‰ª•Ê®°ÊÄÅÊñπÂºèÊòæÁ§∫ÂØπËØùÊ°ÜÔºåÂπ∂ËøîÂõûÁî®Êà∑ÂèçÈ¶àÁªìÊûú
    def show_dialog_pyside(self):
        result = [] # Áî®‰∫éÂ≠òÂÇ®ÂèçÈ¶àÁªìÊûúÁöÑÂàóË°®

        # ÂÆö‰πâ‰∏Ä‰∏™ÊßΩÂáΩÊï∞ÔºåÁî®‰∫éÊé•Êî∂feedback_submitted‰ø°Âè∑ÂèëÂá∫ÁöÑÊï∞ÊçÆ
        def on_feedback_submitted(data):
            nonlocal result
            if data is not None: # Â¶ÇÊûú‰∏çÊòØË∂ÖÊó∂
                 result.extend(data if isinstance(data, list) else [data])

        self.feedback_submitted.connect(on_feedback_submitted)

        # ÊâßË°åÂØπËØùÊ°ÜÔºåexec_()‰ºöÈòªÂ°ûÁõ¥Âà∞ÂØπËØùÊ°ÜÂÖ≥Èó≠
        if self.exec_() == QDialog.Accepted:
            return result # Â¶ÇÊûúÁî®Êà∑Êèê‰∫§ÔºåÂàôËøîÂõûÊî∂ÈõÜÂà∞ÁöÑÂèçÈ¶à
        else:
            return None # Â¶ÇÊûúÁî®Êà∑ÂèñÊ∂àÊàñË∂ÖÊó∂ÔºåÂàôËøîÂõûNone

    # ÂàõÂª∫Âπ∂ËøîÂõûAIÂ∑•‰ΩúÊ±áÊä•Âå∫ÂüüÁöÑQGroupBox
    def _create_report_group(self) -> QGroupBox:
        report_groupbox = QGroupBox("üìã AIÂ∑•‰ΩúÂÆåÊàêÊ±áÊä•")
        report_layout = QVBoxLayout(report_groupbox)
        report_layout.setContentsMargins(15,15,15,15)

        self.report_text_edit = QTextEdit()
        self.report_text_edit.setReadOnly(True)
        self.report_text_edit.setPlainText(self.work_summary or "Êú¨Ê¨°ÂØπËØù‰∏≠ÂÆåÊàêÁöÑÂ∑•‰ΩúÂÜÖÂÆπ...")
        self.report_text_edit.setFixedHeight(100)
        self.report_text_edit.setStyleSheet("background-color: #ecf0f1;")
        report_layout.addWidget(self.report_text_edit)
        return report_groupbox

    # ÂàõÂª∫Âπ∂ËøîÂõûÁî®Êà∑ÊñáÂ≠óÂèçÈ¶àÂå∫ÂüüÁöÑQGroupBox
    def _create_feedback_text_group(self) -> QGroupBox:
        feedback_groupbox = QGroupBox("üí¨ ÊÇ®ÁöÑÊñáÂ≠óÂèçÈ¶àÔºàÂèØÈÄâÔºâ")
        feedback_layout = QVBoxLayout(feedback_groupbox)
        feedback_layout.setContentsMargins(10,10,10,10)

        self.text_widget = QTextEdit()
        self.text_widget.setPlaceholderText("ËØ∑Âú®Ê≠§ËæìÂÖ•ÊÇ®ÁöÑÂèçÈ¶à„ÄÅÂª∫ËÆÆÊàñÈóÆÈ¢ò...")
        self.text_widget.setMinimumHeight(100)
        self.text_widget.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        feedback_layout.addWidget(self.text_widget)
        return feedback_groupbox

    # ÂàõÂª∫Âπ∂ËøîÂõûÂõæÁâáÂèçÈ¶àÂå∫ÂüüÁöÑQGroupBoxÔºåÂåÖÂê´ÂõæÁâáÈÄâÊã©ÊåâÈíÆÂíåÈ¢ÑËßàÂå∫
    def _create_image_selection_group(self) -> QGroupBox:
        image_groupbox = QGroupBox("üñºÔ∏è ÂõæÁâáÂèçÈ¶àÔºàÂèØÈÄâÔºåÊîØÊåÅÂ§öÂº†Ôºâ")
        image_main_layout = QVBoxLayout(image_groupbox)
        image_main_layout.setContentsMargins(10,10,10,10)
        image_main_layout.setSpacing(15)

        image_button_layout = QHBoxLayout()
        image_button_layout.setSpacing(10)

        self.select_button = QPushButton("üìÅ ÈÄâÊã©ÂõæÁâáÊñá‰ª∂")
        self.select_button.setStyleSheet("background-color: #3498db; color: white;")
        self.select_button.clicked.connect(self.select_image_file_pyside)
        image_button_layout.addWidget(self.select_button)

        self.paste_button = QPushButton("üìã ‰ªéÂâ™Ë¥¥ÊùøÁ≤òË¥¥")
        self.paste_button.setStyleSheet("background-color: #2ecc71; color: white;")
        self.paste_button.clicked.connect(self.paste_from_clipboard_pyside)
        image_button_layout.addWidget(self.paste_button)

        self.clear_images_button = QPushButton("‚ùå Ê∏ÖÈô§ÊâÄÊúâÂõæÁâá")
        self.clear_images_button.setStyleSheet("background-color: #e74c3c; color: white;")
        self.clear_images_button.clicked.connect(self.clear_all_images_pyside)
        image_button_layout.addWidget(self.clear_images_button)
        image_button_layout.addStretch()
        image_main_layout.addLayout(image_button_layout)

        self.preview_scroll_area = QScrollArea()
        self.preview_scroll_area.setWidgetResizable(True)
        self.preview_scroll_area.setMinimumHeight(140)
        self.preview_scroll_area.setStyleSheet("background-color: #f8f9fa; border: 1px solid #dddddd;")

        self.preview_widget = QWidget()
        self.preview_scroll_area.setWidget(self.preview_widget)
        self.image_preview_layout = QHBoxLayout(self.preview_widget)
        self.image_preview_layout.setAlignment(Qt.AlignLeft)
        self.image_preview_layout.setContentsMargins(5,5,5,5)
        self.image_preview_layout.setSpacing(10)
        self.preview_widget.setLayout(self.image_preview_layout)
        self.update_image_preview_pyside()

        image_main_layout.addWidget(self.preview_scroll_area)
        return image_groupbox

    # ÂàõÂª∫Âπ∂ËøîÂõûÂåÖÂê´Êèê‰∫§ÂíåÂèñÊ∂àÊåâÈíÆÁöÑÂ∫ïÈÉ®Êìç‰ΩúÊåâÈíÆÂ∏ÉÂ±Ä
    def _create_action_buttons_layout(self) -> QHBoxLayout:
        action_button_layout = QHBoxLayout()
        action_button_layout.setSpacing(15)
        action_button_layout.addStretch(1)

        self.submit_button = QPushButton("‚úÖ Êèê‰∫§ÂèçÈ¶à")
        self.submit_button.setStyleSheet("background-color: #27ae60; color: white; font-size: 12pt; padding: 10px 15px;")
        self.submit_button.setDefault(True)
        self.submit_button.clicked.connect(self.submit_feedback_pyside)
        action_button_layout.addWidget(self.submit_button)

        self.cancel_button = QPushButton("‚ùå ÂèñÊ∂à")
        self.cancel_button.setStyleSheet("font-size: 12pt; padding: 10px 15px;")
        self.cancel_button.clicked.connect(self.reject)
        action_button_layout.addWidget(self.cancel_button)
        action_button_layout.addStretch(1)
        return action_button_layout

    # ‰∏ªÊéß‰ª∂ÂàõÂª∫ÊñπÊ≥ïÔºåË∞ÉÁî®ÂêÑ‰∏™ËæÖÂä©ÊñπÊ≥ïÊûÑÂª∫ÂØπËØùÊ°ÜUI
    def create_widgets_pyside(self):
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(15, 15, 15, 15)
        main_layout.setSpacing(15)

        main_layout.addWidget(self._create_report_group())
        feedback_text_group = self._create_feedback_text_group()
        main_layout.addWidget(feedback_text_group)

        main_layout.addSpacing(10) # Âú®ÊñáÂ≠óÂèçÈ¶àÁªÑÂíåÂõæÁâáÂèçÈ¶àÁªÑ‰πãÈó¥Ê∑ªÂä†10pxÁöÑÈó¥Ë∑ù

        main_layout.addWidget(self._create_image_selection_group())
        main_layout.addLayout(self._create_action_buttons_layout())

        self.setLayout(main_layout)

        if self.text_widget:
            self.text_widget.setFocus() # ËÆæÁΩÆÂàùÂßãÁÑ¶ÁÇπÂà∞ÊñáÂ≠óÂèçÈ¶àËæìÂÖ•Ê°Ü

    # Êõ¥Êñ∞ÂõæÁâáÈ¢ÑËßàÂå∫ÂüüÁöÑÊòæÁ§∫ÂÜÖÂÆπ
    def update_image_preview_pyside(self):
        if self.image_preview_layout is not None:
            while self.image_preview_layout.count():
                child = self.image_preview_layout.takeAt(0)
                if child.widget():
                    child.widget().deleteLater()

        if not self.selected_images_data:
            placeholder_label = QLabel("Êó†ÂõæÁâáÈ¢ÑËßà„ÄÇÁÇπÂáª‰∏äÊñπÊåâÈíÆÊ∑ªÂä†ÂõæÁâá„ÄÇ")
            placeholder_label.setAlignment(Qt.AlignCenter)
            placeholder_label.setStyleSheet("color: #888888; font-style: italic; margin: 20px;")
            self.image_preview_layout.addWidget(placeholder_label)
        else:
            for index, img_data_dict in enumerate(self.selected_images_data):
                pixmap = img_data_dict["pixmap"]

                item_widget = QWidget()
                item_layout = QVBoxLayout(item_widget)
                item_layout.setContentsMargins(5,5,5,5)
                item_layout.setSpacing(3)

                img_label = QLabel()
                scaled_pixmap = pixmap.scaled(100, 100, Qt.KeepAspectRatio, Qt.SmoothTransformation)
                img_label.setPixmap(scaled_pixmap)
                img_label.setAlignment(Qt.AlignCenter)
                item_layout.addWidget(img_label)

                filename = Path(img_data_dict["filename"]).name
                short_filename = filename if len(filename) < 20 else filename[:17] + "..."
                filename_label = QLabel(short_filename)
                filename_label.setAlignment(Qt.AlignCenter)
                item_layout.addWidget(filename_label)

                remove_button = QPushButton("ÁßªÈô§")
                remove_button.setStyleSheet("font-size: 8pt; padding: 2px 5px;")
                remove_button.clicked.connect(lambda checked=False, idx=index: self.remove_image_pyside(idx))
                item_layout.addWidget(remove_button)

                self.image_preview_layout.addWidget(item_widget)

        self.image_preview_layout.addStretch()
        self.preview_widget.adjustSize()

    # ÊßΩÂáΩÊï∞ÔºöÂ§ÑÁêÜÁî®Êà∑ÈÄâÊã©ÂõæÁâáÊñá‰ª∂ÁöÑÊìç‰Ωú
    @Slot()
    def select_image_file_pyside(self):
        file_paths, _ = QFileDialog.getOpenFileNames(
            self,
            "ÈÄâÊã©ÂõæÁâáÊñá‰ª∂",
            "",
            "ÂõæÁâáÊñá‰ª∂ (*.png *.jpg *.jpeg *.bmp *.gif)"
        )
        if file_paths:
            for file_path in file_paths:
                try:
                    path = Path(file_path)
                    with open(path, "rb") as f:
                        img_bytes = f.read()

                    pixmap = QPixmap()
                    pixmap.loadFromData(img_bytes)
                    if not pixmap.isNull():
                         self.selected_images_data.append({
                            "data": img_bytes,
                            "filename": path.name,
                            "pixmap": pixmap
                        })
                    else:
                        QMessageBox.warning(self, "ÂõæÁâáÂä†ËΩΩÂ§±Ë¥•", f"Êó†Ê≥ïÂä†ËΩΩÂõæÁâá: {path.name}")
                except Exception as e:
                    QMessageBox.critical(self, "ÈîôËØØ", f"Âä†ËΩΩÂõæÁâáÂ§±Ë¥• {path.name}: {e}")
            self.update_image_preview_pyside()

    # ÊßΩÂáΩÊï∞ÔºöÂ§ÑÁêÜÁî®Êà∑‰ªéÂâ™Ë¥¥ÊùøÁ≤òË¥¥ÂõæÁâáÁöÑÊìç‰Ωú
    @Slot()
    def paste_from_clipboard_pyside(self):
        clipboard = QApplication.clipboard()
        mime_data = clipboard.mimeData()

        if mime_data.hasImage():
            qimage = clipboard.image()
            if not qimage.isNull():
                try:
                    byte_array = QBuffer()
                    byte_array.open(QBuffer.ReadWrite)
                    qimage.save(byte_array, "PNG")
                    img_bytes = byte_array.data().data()
                    byte_array.close()

                    pixmap = QPixmap.fromImage(qimage)

                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    filename = f"clipboard_image_{timestamp}.png"

                    self.selected_images_data.append({
                        "data": img_bytes,
                        "filename": filename,
                        "pixmap": pixmap
                    })
                    self.update_image_preview_pyside()
                except Exception as e:
                    QMessageBox.critical(self, "ÈîôËØØ", f"Â§ÑÁêÜÂâ™Ë¥¥ÊùøÂõæÁâáÂ§±Ë¥•: {e}")
            else:
                QMessageBox.information(self, "Êó†ÂõæÁâá", "Ââ™Ë¥¥Êùø‰∏≠Ê≤°ÊúâÊúâÊïàÁöÑÂõæÁâá„ÄÇ")
        else:
            QMessageBox.information(self, "Êó†ÂõæÁâá", "Ââ™Ë¥¥Êùø‰∏≠‰∏çÂåÖÂê´ÂõæÁâáÊï∞ÊçÆ„ÄÇ")

    # ÊßΩÂáΩÊï∞ÔºöÊ∏ÖÈô§ÊâÄÊúâÂ∑≤ÈÄâÂõæÁâá
    @Slot()
    def clear_all_images_pyside(self):
        if self.selected_images_data:
            reply = QMessageBox.question(self, "Á°ÆËÆ§Ê∏ÖÈô§",
                                         "Á°ÆÂÆöË¶ÅÊ∏ÖÈô§ÊâÄÊúâÂ∑≤ÈÄâÂõæÁâáÂêóÔºü",
                                         QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
            if reply == QMessageBox.Yes:
                self.selected_images_data.clear()
                self.update_image_preview_pyside()

    # ÊßΩÂáΩÊï∞ÔºöÁßªÈô§ÊåáÂÆöÁ¥¢ÂºïÁöÑÂõæÁâá
    @Slot(int)
    def remove_image_pyside(self, index):
        if 0 <= index < len(self.selected_images_data):
            del self.selected_images_data[index]
            self.update_image_preview_pyside()

    # ÊßΩÂáΩÊï∞ÔºöÂ§ÑÁêÜÁî®Êà∑Êèê‰∫§ÂèçÈ¶àÁöÑÊìç‰Ωú
    @Slot()
    def submit_feedback_pyside(self):
        feedback_items = []

        text_content = self.text_widget.toPlainText().strip()
        if text_content and text_content != self.text_widget.placeholderText():
            feedback_items.append(text_content)

        for img_dict in self.selected_images_data:
            try:
                pil_image = Image.open(io.BytesIO(img_dict["data"]))
                img_format = pil_image.format or "PNG"

                base64_data = base64.b64encode(img_dict["data"]).decode('utf-8')

                mcp_image_dict = {
                    "type": "image",
                    "base64_data": base64_data,
                    "format": img_format.lower(),
                    "filename": img_dict["filename"]
                }
                feedback_items.append(mcp_image_dict)
            except Exception as e:
                print(f"Error processing image {img_dict['filename']} for submission: {e}")

        self.feedback_submitted.emit(feedback_items) # ÂèëÂá∫ÂåÖÂê´ÂèçÈ¶àÂÜÖÂÆπÁöÑ‰ø°Âè∑
        self.accept() # ÂÖ≥Èó≠ÂØπËØùÊ°ÜÔºåÁä∂ÊÄÅ‰∏∫Accepted


# MCPÂ∑•ÂÖ∑ÔºöÊî∂ÈõÜÁî®Êà∑ÂèçÈ¶à
@mcp.tool()
def collect_feedback(work_summary: str = "", timeout_seconds: int = DIALOG_TIMEOUT) -> list:
    """
    ÊòæÁ§∫‰∏Ä‰∏™GUIÂØπËØùÊ°ÜÔºåÁî®‰∫éÊî∂ÈõÜÁî®Êà∑ÁöÑÊñáÊú¨ÂíåÂõæÁâáÂèçÈ¶à„ÄÇ
    Args:
        work_summary: AIÂÆåÊàêÁöÑÂ∑•‰ΩúÂÜÖÂÆπÁöÑÊ±áÊä•„ÄÇ
        timeout_seconds: ÂØπËØùÊ°ÜË∂ÖÊó∂Êó∂Èó¥ÔºàÁßíÔºâ„ÄÇ
    Returns:
        ‰∏Ä‰∏™ÂåÖÂê´Áî®Êà∑ÂèçÈ¶àÁöÑÂàóË°®„ÄÇÊØè‰∏™ÂèçÈ¶àÈ°πÂèØ‰ª•ÊòØÔºö
        - ÊñáÊú¨Â≠óÁ¨¶‰∏≤ (Áî®Êà∑ÁöÑÊñáÂ≠óÂèçÈ¶à)
        - MCPImage ÂØπË±° (Áî®Êà∑Êèê‰æõÁöÑÂõæÁâá)
        Â¶ÇÊûúË∂ÖÊó∂ÊàñÁî®Êà∑ÂèñÊ∂àÔºåÂàôËøîÂõû None ÊàñÁ©∫ÂàóË°®„ÄÇ (ÂΩìÂâçÂÆûÁé∞ÔºöË∂ÖÊó∂ÊàñÂèñÊ∂àËøîÂõûÁ©∫ÂàóË°®[])
    """
    app = QApplication.instance()
    if not app:
        app = QApplication(sys.argv)

    dialog = FeedbackDialog(work_summary=work_summary, timeout_seconds=timeout_seconds)
    feedback_data = dialog.show_dialog_pyside()

    if feedback_data is None: # Áî®Êà∑ÂèñÊ∂àÊàñË∂ÖÊó∂ (show_dialog_pyside ËøîÂõû None)
        return [] # Ê†πÊçÆÂΩìÂâçËÆæËÆ°ËøîÂõûÁ©∫ÂàóË°®

    processed_feedback = []
    if not feedback_data: # Áî®Êà∑Êèê‰∫§‰ΩÜÊú™Êèê‰æõ‰ªª‰ΩïÂÜÖÂÆπ (show_dialog_pyside ËøîÂõûÁ©∫ÂàóË°®)
        return []

    for item in feedback_data:
        if isinstance(item, str):
            processed_feedback.append(item)
        elif isinstance(item, dict) and item.get("type") == "image":
            try:
                mcp_img = MCPImage(
                    base64_data=item["base64_data"],
                    format=item["format"],
                    filename=item["filename"]
                )
                processed_feedback.append(mcp_img)
            except Exception as e:
                print(f"Error converting dictionary to MCPImage: {e}")
        else:
            print(f"Unknown item type in feedback_data: {type(item)}")

    return processed_feedback


# MCPÂ∑•ÂÖ∑ÔºöËÆ©Áî®Êà∑ÈÄâÊã©ÊàñÁ≤òË¥¥Âçï‰∏™ÂõæÁâá
@mcp.tool()
def pick_image() -> MCPImage:
    """
    ÂºπÂá∫‰∏Ä‰∏™ÁÆÄÂçïÁöÑGUIÂØπËØùÊ°ÜÔºåËÆ©Áî®Êà∑ÈÄâÊã©Âçï‰∏™ÂõæÁâáÊñá‰ª∂Êàñ‰ªéÂâ™Ë¥¥ÊùøÁ≤òË¥¥ÂõæÁâá„ÄÇ
    Returns:
        MCPImage ÂØπË±°ÔºåÂ¶ÇÊûúÁî®Êà∑ÂèñÊ∂àÊàñÊ≤°ÊúâÈÄâÊã©ÂõæÁâáÔºåÂàôÂèØËÉΩËøîÂõû None ÊàñÂºïÂèëÂºÇÂ∏∏ÔºàÈúÄÁ°ÆËÆ§MCPÊ°ÜÊû∂Â§ÑÁêÜÊñπÂºèÔºâ„ÄÇ
        ‰∏∫‰∫ÜÂÆâÂÖ®Ëµ∑ËßÅÔºåÂ¶ÇÊûúÊó†ÂõæÁâáÔºåÊàë‰ª¨Â∞ÜÂ∞ùËØïËøîÂõû‰∏Ä‰∏™Á©∫ÁöÑÊàñÊó†ÊïàÁöÑMCPImageÔºåÊàñÂºïÂèëÁâπÂÆöÂºÇÂ∏∏„ÄÇ
        Ê†πÊçÆÂéüÊúâÂÆûÁé∞ÔºåÂÆÉ‰ºº‰πé‰ºöÂú®Êó†ÂõæÁâáÊó∂ËøîÂõû‰∏Ä‰∏™ÂåÖÂê´Á©∫Ë∑ØÂæÑÁöÑImageÂØπË±°ÔºåËøôÂèØËÉΩÈúÄË¶ÅË∞ÉÊï¥„ÄÇ
        FastMCP Image is: TypedDict("Image", {"format": str, "base64_data": str, "path": NotRequired[str], "url": NotRequired[str], "filename": NotRequired[str]})
    """
    app = QApplication.instance()
    if not app:
        app = QApplication(sys.argv)

    msg_box = QMessageBox()
    msg_box.setWindowTitle("ÈÄâÊã©ÂõæÁâáÊù•Ê∫ê")
    msg_box.setText("ÊÇ®ÊÉ≥Â¶Ç‰ΩïÈÄâÊã©ÂõæÁâáÔºü")
    file_button = msg_box.addButton("‰ªéÊñá‰ª∂ÈÄâÊã©", QMessageBox.ActionRole)
    paste_button = msg_box.addButton("‰ªéÂâ™Ë¥¥ÊùøÁ≤òË¥¥", QMessageBox.ActionRole)
    cancel_button = msg_box.addButton(QMessageBox.Cancel)
    msg_box.setDefaultButton(file_button)
    msg_box.exec()

    img_bytes = None
    filename = "image"
    img_format = "png"

    if msg_box.clickedButton() == file_button:
        file_path, _ = QFileDialog.getOpenFileName(
            None,
            "ÈÄâÊã©Âçï‰∏™ÂõæÁâáÊñá‰ª∂",
            "",
            "ÂõæÁâáÊñá‰ª∂ (*.png *.jpg *.jpeg *.bmp *.gif)"
        )
        if file_path:
            path_obj = Path(file_path)
            filename = path_obj.name
            try:
                with open(path_obj, "rb") as f:
                    img_bytes = f.read()
                pil_img = Image.open(io.BytesIO(img_bytes))
                img_format = pil_img.format or "PNG"
            except Exception as e:
                QMessageBox.critical(None, "ÈîôËØØ", f"Êó†Ê≥ïÂä†ËΩΩÂõæÁâá {filename}: {e}")
                return MCPImage(base64_data="", format="", filename="error_loading_file")
    elif msg_box.clickedButton() == paste_button:
        clipboard = QApplication.clipboard()
        mime_data = clipboard.mimeData()
        if mime_data.hasImage():
            qimage = clipboard.image()
            if not qimage.isNull():
                try:
                    byte_array = QBuffer()
                    byte_array.open(QBuffer.ReadWrite)
                    qimage.save(byte_array, "PNG")
                    img_bytes = byte_array.data().data()
                    byte_array.close()
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    filename = f"clipboard_image_{timestamp}.png"
                    img_format = "png"
                except Exception as e:
                    QMessageBox.critical(None, "ÈîôËØØ", f"Â§ÑÁêÜÂâ™Ë¥¥ÊùøÂõæÁâáÂ§±Ë¥•: {e}")
                    return MCPImage(base64_data="", format="", filename="error_processing_clipboard")
            else:
                QMessageBox.information(None, "Êó†ÂõæÁâá", "Ââ™Ë¥¥Êùø‰∏≠Ê≤°ÊúâÊúâÊïàÁöÑÂõæÁâá„ÄÇ")
        else:
            QMessageBox.information(None, "Êó†ÂõæÁâá", "Ââ™Ë¥¥Êùø‰∏≠‰∏çÂåÖÂê´ÂõæÁâáÊï∞ÊçÆ„ÄÇ")
    elif msg_box.clickedButton() == cancel_button:
        return MCPImage(base64_data="", format="", filename="cancelled_by_user")

    if img_bytes:
        base64_data = base64.b64encode(img_bytes).decode('utf-8')
        return MCPImage(
            base64_data=base64_data,
            format=img_format.lower(),
            filename=filename
        )
    else:
        # Â¶ÇÊûúÂâçÈù¢Ê≠•È™§Ê≤°ÊúâÊàêÂäüËé∑ÂèñÂõæÁâáÂ≠óËäÇ‰∏îÊú™ÊèêÂâçËøîÂõûÔºåÂàôÊâßË°åÂà∞ËøôÈáå
        if msg_box.clickedButton() != cancel_button : # ÈÅøÂÖçÂú®ÂèñÊ∂àÊó∂‰πüÂºπËøô‰∏™‰ø°ÊÅØ
             QMessageBox.information(None, "Êú™ÈÄâÊã©ÂõæÁâá", "Ê≤°ÊúâÈÄâÊã©ÊàñÁ≤òË¥¥‰ªª‰ΩïÂõæÁâáÔºåÊàñÊìç‰ΩúÊú™ÊàêÂäü„ÄÇ")
        return MCPImage(base64_data="", format="", filename="no_image_selected_or_error")


# MCPÂ∑•ÂÖ∑ÔºöËé∑ÂèñÊåáÂÆöË∑ØÂæÑÂõæÁâáÁöÑ‰ø°ÊÅØ
@mcp.tool()
def get_image_info(image_path: str) -> str:
    """Ëé∑ÂèñÊåáÂÆöË∑ØÂæÑÂõæÁâáÁöÑ‰ø°ÊÅØÔºà‰∏ªË¶ÅÊòØÂ∞∫ÂØ∏ÂíåÊ†ºÂºèÔºâ"""
    try:
        with open(image_path, "rb") as f:
            img_bytes = f.read()
        pil_img = Image.open(io.BytesIO(img_bytes))
        return f"Image format: {pil_img.format}, size: {pil_img.size}"
    except FileNotFoundError:
        return f"Error: Image file not found at {image_path}"
    except Exception as e:
        return f"Error processing image {image_path}: {e}"

# ‰∏ªÂáΩÊï∞ÔºåÁî®‰∫éÂêØÂä®MCPÊúçÂä°Âô®ÊàñUIË∞ÉËØïÊ®°Âºè
def main():
    """ÂêØÂä®MCPÊúçÂä°Âô®ÂíåQtÂ∫îÁî®ÔºàÂ¶ÇÊûúÈúÄË¶ÅÔºâÔºåÊàñÁõ¥Êé•ÂêØÂä®UIËøõË°åË∞ÉËØï„ÄÇ"""
    parser = argparse.ArgumentParser(description="MCP Feedback Collector Server and UI Debug Tool")
    parser.add_argument(
        "--debug-ui",
        action="store_true",
        help="Áõ¥Êé•ÂêØÂä® FeedbackDialog ËøõË°åUIË∞ÉËØïÔºåË∑≥ËøáMCPÊúçÂä°Âô®ÂêØÂä®„ÄÇ"
    )
    parser.add_argument(
        "--summary",
        type=str,
        default="ËøôÊòØAIÂÆåÊàêÂ∑•‰ΩúÁöÑÁ§∫‰æãÊ±áÊä•ÂÜÖÂÆπÔºåÁî®‰∫éUIË∞ÉËØï„ÄÇ",
        help="Âú®UIË∞ÉËØïÊ®°Âºè‰∏ãÔºåÂØπËØùÊ°Ü‰∏≠ÊòæÁ§∫ÁöÑÂ∑•‰ΩúÊ±áÊä•ÂÜÖÂÆπ„ÄÇ"
    )
    args = parser.parse_args()

    app = QApplication.instance()
    if not app:
        app = QApplication(sys.argv)

    if args.debug_ui:
        print("--- FeedbackDialog UI DEBUG MODE ---")
        # Âú®Ë∞ÉËØïÊ®°Âºè‰∏ãÔºåÂèØ‰ª•ËÆæÁΩÆ‰∏Ä‰∏™ËæÉÁü≠ÁöÑË∂ÖÊó∂Êó∂Èó¥ÔºåÊàñËÄÖ‰∏çËÆæÁΩÆË∂ÖÊó∂
        # DIALOG_TIMEOUT_DEBUG = 10 # ‰æãÂ¶Ç10ÁßíÔºåÊàñ‰ΩøÁî®ÁéØÂ¢ÉÂèòÈáè‰∏≠ÁöÑÂÄº
        print(f"ÂêØÂä® FeedbackDialogÔºåÊ±áÊä•ÂÜÖÂÆπ: '{args.summary}'")
        dialog = FeedbackDialog(work_summary=args.summary, timeout_seconds=DIALOG_TIMEOUT)
        feedback_result = dialog.show_dialog_pyside()
        print(f"FeedbackDialog Â∑≤ÂÖ≥Èó≠„ÄÇËøîÂõûÁªìÊûú: {feedback_result}")
        print("--- UI DEBUG MODE FINISHED ---")
        return # UIË∞ÉËØïÊ®°ÂºèÁªìÊùüÂêéÁõ¥Êé•ÈÄÄÂá∫

    # --- ‰ª•‰∏ã‰∏∫Ê≠£Â∏∏ÁöÑMCPÊúçÂä°Âô®ÂêØÂä®ÊµÅÁ®ã ---
    print("Starting MCP Feedback Collector Server with PySide6 GUI...")

    print(f"MCP server '{mcp.name}' with tools is configured.")
    print("Attempting to start FastMCP server...")

    try:
        # Â∞ùËØïÂêØÂä®FastMCPÊúçÂä°Âô®ÔºåÂÖ∑‰ΩìÂêØÂä®ÊñπÂºè‰æùËµñFastMCPÊ°ÜÊû∂ÁöÑAPI
        if hasattr(mcp, 'run_server') and callable(mcp.run_server):
            print("Running mcp.run_server()...")
            mcp.run_server() # ÂÅáËÆæÊ≠§ÊñπÊ≥ï‰ºöÈòªÂ°ûÂπ∂ÂêØÂä®ÊúçÂä°Âô®
        elif hasattr(mcp, 'run') and callable(mcp.run):
            print("Running mcp.run()...")
            mcp.run() # Â§áÈÄâÁöÑÂêØÂä®ÊñπÊ≥ï
        else:
            print("ERROR: FastMCP object does not have a callable 'run_server' or 'run' method.")
            print("The server.py script will exit without starting a listening MCP server.")
            return

        print("FastMCP server has been shut down.")

    except KeyboardInterrupt:
        print("MCP Feedback Collector Server stopped by user (KeyboardInterrupt).")
    except Exception as e:
        print(f"An error occurred while running the MCP server: {e}")
        import traceback
        traceback.print_exc()
    finally:
        print("Main function for MCP server has finished.")

if __name__ == "__main__":
    main()